name: Release Build

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v0.1.0)'
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

permissions:
  contents: write
  packages: write

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Get version from tag or input
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Version: ${VERSION}"

      - name: Create Release
        id: create_release
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: release } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: '${{ steps.get_version.outputs.version }}',
              name: 'TurboMCP Studio ${{ steps.get_version.outputs.version }}',
              body: 'See CHANGELOG.md for release notes.',
              draft: true,
              prerelease: false
            });

            const fs = require('fs');
            const outputFile = process.env.GITHUB_OUTPUT;
            fs.appendFileSync(outputFile, `upload_url=${release.upload_url}\n`);
            fs.appendFileSync(outputFile, `release_id=${release.id}\n`);

  build-tauri:
    name: Build ${{ matrix.platform }}
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        include:
          # macOS builds
          - platform: 'macos-latest'
            os: macos-latest
            rust_target: 'x86_64-apple-darwin'
            args: '--target x86_64-apple-darwin'
          - platform: 'macos-latest'
            os: macos-latest
            rust_target: 'aarch64-apple-darwin'
            args: '--target aarch64-apple-darwin'

          # Windows build
          - platform: 'windows-latest'
            os: windows-latest
            rust_target: 'x86_64-pc-windows-msvc'
            args: ''

          # Linux builds
          - platform: 'ubuntu-22.04'
            os: ubuntu-22.04
            rust_target: 'x86_64-unknown-linux-gnu'
            args: ''

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9.12.0
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.rust_target }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'
          cache-on-failure: true

      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            build-essential \
            curl \
            wget \
            file \
            libxdo-dev \
            libssl-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev

      - name: Install macOS dependencies
        if: startsWith(matrix.os, 'macos')
        run: brew install create-dmg

      - name: Install frontend dependencies
        run: pnpm install --frozen-lockfile

      - name: Build Tauri app
        uses: tauri-apps/tauri-action@v0.5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
          CARGO_NET_GIT_FETCH_WITH_CLI: 'true'
          npm_config_registry: 'https://registry.npmjs.org/'
        with:
          args: ${{ matrix.args }}
