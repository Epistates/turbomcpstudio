name: Release Build

# Triggered by version tags (v*.*.*)
# Builds Linux and Windows releases without code signing
on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v0.1.0)'
        required: true
        type: string

# Apple builds temporarily disabled - requires Apple Developer Account credentials for code signing
# To re-enable: uncomment macOS matrix entries and configure required GitHub secrets
# See README.md for required secrets: APPLE_CERTIFICATE, APPLE_ID, etc.

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

permissions:
  contents: write
  packages: write

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Get version from tag or input
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Version: ${VERSION}"

      - name: Create Release
        id: create_release
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: release } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: '${{ steps.get_version.outputs.version }}',
              name: 'TurboMCP Studio ${{ steps.get_version.outputs.version }}',
              body: 'See CHANGELOG.md for release notes.',
              draft: true,
              prerelease: false
            });

            const fs = require('fs');
            const outputFile = process.env.GITHUB_OUTPUT;
            fs.appendFileSync(outputFile, `upload_url=${release.upload_url}\n`);
            fs.appendFileSync(outputFile, `release_id=${release.id}\n`);

  build-tauri:
    name: Build ${{ matrix.platform }}
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        include:
          # macOS builds (temporarily disabled - requires Apple Developer credentials)
          # - platform: 'macos-latest'
          #   os: macos-latest
          #   rust_target: 'x86_64-apple-darwin'
          #   args: '--target x86_64-apple-darwin'
          # - platform: 'macos-latest'
          #   os: macos-latest
          #   rust_target: 'aarch64-apple-darwin'
          #   args: '--target aarch64-apple-darwin'

          # Windows build
          - platform: 'windows-latest'
            os: windows-latest
            rust_target: 'x86_64-pc-windows-msvc'
            args: ''

          # Linux build
          - platform: 'ubuntu-22.04'
            os: ubuntu-22.04
            rust_target: 'x86_64-unknown-linux-gnu'
            args: ''

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9.12.0
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.rust_target }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'
          cache-on-failure: true

      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            build-essential \
            curl \
            wget \
            file \
            libxdo-dev \
            libssl-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev

      # macOS dependencies and certificate setup temporarily disabled
      # - name: Install macOS dependencies
      #   if: startsWith(matrix.os, 'macos')
      #   run: brew install create-dmg
      #
      # - name: Import Apple Developer Certificate
      #   if: startsWith(matrix.os, 'macos')
      #   env:
      #     APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
      #     APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
      #     KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      #   run: |
      #     # Only run if certificate is provided
      #     if [ -n "$APPLE_CERTIFICATE" ]; then
      #       echo "Importing Apple Developer Certificate..."
      #       echo "$APPLE_CERTIFICATE" | base64 --decode > certificate.p12
      #       security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
      #       security default-keychain -s build.keychain
      #       security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
      #       security set-keychain-settings -t 3600 -u build.keychain
      #       security import certificate.p12 -k build.keychain -P "$APPLE_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
      #       security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" build.keychain
      #       rm certificate.p12
      #
      #       # Extract and set signing identity
      #       CERT_INFO=$(security find-identity -v -p codesigning build.keychain | grep "Developer ID Application" || echo "")
      #       if [ -n "$CERT_INFO" ]; then
      #         CERT_ID=$(echo "$CERT_INFO" | head -1 | awk -F'"' '{print $2}')
      #         echo "APPLE_SIGNING_IDENTITY=$CERT_ID" >> $GITHUB_ENV
      #         echo "Certificate imported: $CERT_ID"
      #       else
      #         echo "No Developer ID Application certificate found, build will be unsigned"
      #       fi
      #     else
      #       echo "No Apple certificate provided, build will be unsigned"
      #     fi

      - name: Install frontend dependencies
        run: pnpm install --frozen-lockfile

      - name: Build Tauri app
        uses: tauri-apps/tauri-action@v0.5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CARGO_NET_GIT_FETCH_WITH_CLI: 'true'
          # Code signing disabled - building unsigned releases
          # macOS code signing and notarization (temporarily disabled)
          # APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          # APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          # APPLE_SIGNING_IDENTITY: ${{ env.APPLE_SIGNING_IDENTITY }}
          # APPLE_ID: ${{ secrets.APPLE_ID }}
          # APPLE_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          # APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          # Windows code signing (Tauri v2 uses different variables than macOS) - temporarily disabled
          # TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          # TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        with:
          args: ${{ matrix.args }}

      - name: Debug - List build outputs
        if: always()
        shell: bash
        run: |
          echo "=== Build target: ${{ matrix.rust_target }} ==="
          if [ -d "src-tauri/target/${{ matrix.rust_target }}/release/bundle" ]; then
            echo "Bundle directory found:"
            find "src-tauri/target/${{ matrix.rust_target }}/release/bundle" -type f | head -20
          else
            echo "No bundle directory found at src-tauri/target/${{ matrix.rust_target }}/release/bundle"
            echo "Available targets:"
            ls -la src-tauri/target/ 2>/dev/null || echo "src-tauri/target/ not found"
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.rust_target }}-artifacts
          path: src-tauri/target/${{ matrix.rust_target }}/release/bundle/
          retention-days: 1
          if-no-files-found: warn

  upload-release:
    name: Upload Release Assets
    needs: [create-release, build-tauri]
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Upload to release
        uses: softprops/action-gh-release@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: ${{ needs.create-release.outputs.version }}
          draft: true
          files: |
            artifacts/**/*.deb
            artifacts/**/*.AppImage
            artifacts/**/*.exe
            artifacts/**/*.msi
